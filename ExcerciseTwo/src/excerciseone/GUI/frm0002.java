/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package excerciseone.GUI;

import excerciseone.BLL.Frm0002BLL;
import excerciseone.BLL.Common;
import excerciseone.DAL.FileDAL;
import excerciseone.DAL.SubjectsWithClassroomDAL;
import excerciseone.DTO.AccountSchoolDTO;
import excerciseone.DTO.ClassRoomDTO;
import excerciseone.DTO.StudentsDTO;
import excerciseone.DTO.StudentsWithPointDTO;
import excerciseone.DTO.SubjectsDTO;
import excerciseone.DTO.SubjectsWithClassroomDTO;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author peter
 */
public class frm0002 extends javax.swing.JFrame {
    
    private AccountSchoolDTO accurent;
    
    /**
     * Creates new form frm0002
     */
    public frm0002() {
        initComponents();
        createContent();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelRoot = new javax.swing.JPanel();
        timecurrents = new javax.swing.JLabel();
        btnchangepass = new javax.swing.JButton();
        btnlogout = new javax.swing.JButton();
        username = new javax.swing.JLabel();
        jpannelviewstudentclass = new javax.swing.JPanel();
        labelviewstudentclass = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DefaultTableModel modeltablestudentclass= new DefaultTableModel(){
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };
        modeltablestudentclass.addColumn("STT");
        modeltablestudentclass.addColumn("MSSV");
        modeltablestudentclass.addColumn("FULL NAME");
        modeltablestudentclass.addColumn("SEX");
        modeltablestudentclass.addColumn("IDENTITY");
        tablestudentclass = new javax.swing.JTable(modeltablestudentclass);
        cbxstudentclass = new javax.swing.JComboBox<>();
        jpannelviewscheduleclass = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DefaultTableModel modeltablescheduleclass= new DefaultTableModel(){
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };

        modeltablescheduleclass.addColumn("STT");
        modeltablescheduleclass.addColumn("CODE SUBJECT");
        modeltablescheduleclass.addColumn("NAME SUBJECT");
        modeltablescheduleclass.addColumn("ROOM");
        tablescheduleclass = new javax.swing.JTable(modeltablescheduleclass);
        cbxscheduleclass = new javax.swing.JComboBox<>();
        labelviewscheduleclass1 = new javax.swing.JLabel();
        jpannelviewpointsubject = new javax.swing.JPanel();
        labelviewpointsubject = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        DefaultTableModel modeltablepointsubject= new DefaultTableModel(){
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };
        modeltablepointsubject.addColumn("STT");
        modeltablepointsubject.addColumn("MSSV");
        modeltablepointsubject.addColumn("FULL NAME");
        modeltablepointsubject.addColumn("POINT MID");
        modeltablepointsubject.addColumn("POINT FINAL");
        modeltablepointsubject.addColumn("POINT DIFFERENCE");
        modeltablepointsubject.addColumn("POINT SUMMARY");
        modeltablepointsubject.addColumn("STATUS");
        tablepointsubject = new javax.swing.JTable(modeltablepointsubject);
        cbxpointsubject = new javax.swing.JComboBox<>();
        labelxacxuatdau = new javax.swing.JLabel();
        btnchangepoint = new javax.swing.JButton();
        jpannelviewstudentsubject = new javax.swing.JPanel();
        labelviewstudentsubject = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        DefaultTableModel modeltablestudentsubject= new DefaultTableModel(){
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };
        modeltablestudentsubject.addColumn("STT");
        modeltablestudentsubject.addColumn("MSSV");
        modeltablestudentsubject.addColumn("FULL NAME");
        modeltablestudentsubject.addColumn("SEX");
        modeltablestudentsubject.addColumn("IDENTITY");
        tablestudentsubject = new javax.swing.JTable(modeltablestudentsubject);
        cbxstudentsubject = new javax.swing.JComboBox<>();
        btnoutclass = new javax.swing.JButton();
        btninclass = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        importStudent = new javax.swing.JMenuItem();
        importschedules = new javax.swing.JMenuItem();
        importpoint = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        managestudentclass = new javax.swing.JMenuItem();
        View = new javax.swing.JMenu();
        viewstudentclass = new javax.swing.JMenuItem();
        viewscheduleclass = new javax.swing.JMenuItem();
        viewstudentsubject = new javax.swing.JMenuItem();
        viewpointsubject = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Management Student");
        setLocation(new java.awt.Point(150, 50));
        setPreferredSize(new java.awt.Dimension(1024, 600));
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanelRoot.setBackground(new java.awt.Color(129, 211, 227));
        jPanelRoot.setPreferredSize(new java.awt.Dimension(1024, 600));

        timecurrents.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        timecurrents.setText("0000-00-00 00:00:00 ");

        btnchangepass.setBackground(new java.awt.Color(220, 204, 96));
        btnchangepass.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnchangepass.setText("Change password");
        btnchangepass.setName("btnchangepass"); // NOI18N
        btnchangepass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnchangepassMouseClicked(evt);
            }
        });

        btnlogout.setBackground(new java.awt.Color(124, 121, 102));
        btnlogout.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnlogout.setText("Logout");
        btnlogout.setName("btnchangepass"); // NOI18N
        btnlogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnlogoutMousePressed(evt);
            }
        });

        username.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        username.setForeground(new java.awt.Color(195, 37, 39));
        username.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/support(2).png"))); // NOI18N
        username.setText("Name");

        jpannelviewstudentclass.setBackground(new java.awt.Color(129, 211, 227));
        jpannelviewstudentclass.setPreferredSize(new java.awt.Dimension(1024, 500));

        labelviewstudentclass.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelviewstudentclass.setText("All Students Class:");

        tablestudentclass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablestudentclassMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablestudentclass);

        cbxstudentclass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxstudentclass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxstudentclassItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jpannelviewstudentclassLayout = new javax.swing.GroupLayout(jpannelviewstudentclass);
        jpannelviewstudentclass.setLayout(jpannelviewstudentclassLayout);
        jpannelviewstudentclassLayout.setHorizontalGroup(
            jpannelviewstudentclassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpannelviewstudentclassLayout.createSequentialGroup()
                .addComponent(labelviewstudentclass, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cbxstudentclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jpannelviewstudentclassLayout.setVerticalGroup(
            jpannelviewstudentclassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpannelviewstudentclassLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpannelviewstudentclassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelviewstudentclass)
                    .addComponent(cbxstudentclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
        );

        jpannelviewscheduleclass.setBackground(new java.awt.Color(129, 211, 227));
        jpannelviewscheduleclass.setPreferredSize(new java.awt.Dimension(1024, 500));

        jScrollPane3.setViewportView(tablescheduleclass);

        cbxscheduleclass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxscheduleclass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxscheduleclassItemStateChanged(evt);
            }
        });

        labelviewscheduleclass1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelviewscheduleclass1.setText("Schedule Class:");

        javax.swing.GroupLayout jpannelviewscheduleclassLayout = new javax.swing.GroupLayout(jpannelviewscheduleclass);
        jpannelviewscheduleclass.setLayout(jpannelviewscheduleclassLayout);
        jpannelviewscheduleclassLayout.setHorizontalGroup(
            jpannelviewscheduleclassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpannelviewscheduleclassLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelviewscheduleclass1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxscheduleclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jpannelviewscheduleclassLayout.setVerticalGroup(
            jpannelviewscheduleclassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpannelviewscheduleclassLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpannelviewscheduleclassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxscheduleclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelviewscheduleclass1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
        );

        jpannelviewpointsubject.setBackground(new java.awt.Color(129, 211, 227));
        jpannelviewpointsubject.setPreferredSize(new java.awt.Dimension(1024, 500));

        labelviewpointsubject.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelviewpointsubject.setText("Point of Subject: ");

        jScrollPane4.setViewportView(tablepointsubject);

        cbxpointsubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxpointsubject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxpointsubjectItemStateChanged(evt);
            }
        });

        labelxacxuatdau.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelxacxuatdau.setText("Percent pass: ");

        btnchangepoint.setBackground(new java.awt.Color(241, 215, 36));
        btnchangepoint.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        btnchangepoint.setText("Change Point");
        btnchangepoint.setName("btnlogin"); // NOI18N
        btnchangepoint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnchangepointMouseClicked(evt);
            }
        });
        btnchangepoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchangepointActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpannelviewpointsubjectLayout = new javax.swing.GroupLayout(jpannelviewpointsubject);
        jpannelviewpointsubject.setLayout(jpannelviewpointsubjectLayout);
        jpannelviewpointsubjectLayout.setHorizontalGroup(
            jpannelviewpointsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpannelviewpointsubjectLayout.createSequentialGroup()
                .addComponent(labelviewpointsubject, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbxpointsubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(btnchangepoint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelxacxuatdau, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jpannelviewpointsubjectLayout.setVerticalGroup(
            jpannelviewpointsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpannelviewpointsubjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpannelviewpointsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelviewpointsubject)
                    .addComponent(cbxpointsubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelxacxuatdau)
                    .addComponent(btnchangepoint))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
        );

        jpannelviewstudentsubject.setBackground(new java.awt.Color(129, 211, 227));
        jpannelviewstudentsubject.setPreferredSize(new java.awt.Dimension(1024, 500));

        labelviewstudentsubject.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        labelviewstudentsubject.setText("All Student of subject:");

        jScrollPane5.setViewportView(tablestudentsubject);

        cbxstudentsubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxstudentsubject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxstudentsubjectItemStateChanged(evt);
            }
        });

        btnoutclass.setBackground(new java.awt.Color(195, 190, 152));
        btnoutclass.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        btnoutclass.setText("Out Class");
        btnoutclass.setName("btnlogin"); // NOI18N
        btnoutclass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnoutclassMouseClicked(evt);
            }
        });

        btninclass.setBackground(new java.awt.Color(241, 215, 36));
        btninclass.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        btninclass.setText("In Class");
        btninclass.setName("btnlogin"); // NOI18N
        btninclass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btninclassMouseClicked(evt);
            }
        });
        btninclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninclassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpannelviewstudentsubjectLayout = new javax.swing.GroupLayout(jpannelviewstudentsubject);
        jpannelviewstudentsubject.setLayout(jpannelviewstudentsubjectLayout);
        jpannelviewstudentsubjectLayout.setHorizontalGroup(
            jpannelviewstudentsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpannelviewstudentsubjectLayout.createSequentialGroup()
                .addComponent(labelviewstudentsubject, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxstudentsubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(btninclass)
                .addGap(66, 66, 66)
                .addComponent(btnoutclass)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jpannelviewstudentsubjectLayout.setVerticalGroup(
            jpannelviewstudentsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpannelviewstudentsubjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpannelviewstudentsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpannelviewstudentsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnoutclass)
                        .addComponent(btninclass))
                    .addGroup(jpannelviewstudentsubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelviewstudentsubject)
                        .addComponent(cbxstudentsubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelRootLayout = new javax.swing.GroupLayout(jPanelRoot);
        jPanelRoot.setLayout(jPanelRootLayout);
        jPanelRootLayout.setHorizontalGroup(
            jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRootLayout.createSequentialGroup()
                .addContainerGap(476, Short.MAX_VALUE)
                .addComponent(username)
                .addGap(82, 82, 82)
                .addComponent(timecurrents)
                .addGap(18, 18, 18)
                .addComponent(btnchangepass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnlogout)
                .addContainerGap())
            .addComponent(jpannelviewstudentclass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelRootLayout.createSequentialGroup()
                    .addComponent(jpannelviewscheduleclass, javax.swing.GroupLayout.DEFAULT_SIZE, 1012, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpannelviewpointsubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpannelviewstudentsubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRootLayout.setVerticalGroup(
            jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRootLayout.createSequentialGroup()
                .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnlogout)
                    .addComponent(btnchangepass)
                    .addComponent(username)
                    .addComponent(timecurrents))
                .addGap(18, 18, 18)
                .addComponent(jpannelviewstudentclass, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE))
            .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRootLayout.createSequentialGroup()
                    .addGap(0, 46, Short.MAX_VALUE)
                    .addComponent(jpannelviewscheduleclass, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRootLayout.createSequentialGroup()
                    .addGap(0, 44, Short.MAX_VALUE)
                    .addComponent(jpannelviewpointsubject, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRootLayout.createSequentialGroup()
                    .addGap(0, 49, Short.MAX_VALUE)
                    .addComponent(jpannelviewstudentsubject, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jMenuBar1.setBackground(new java.awt.Color(79, 142, 163));
        jMenuBar1.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N

        File.setBackground(new java.awt.Color(79, 142, 163));
        File.setText("File");
        File.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        importStudent.setBackground(new java.awt.Color(79, 142, 163));
        importStudent.setText("Import Students Class");
        importStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importStudentActionPerformed(evt);
            }
        });
        File.add(importStudent);

        importschedules.setBackground(new java.awt.Color(79, 142, 163));
        importschedules.setText("Import Shedules Class");
        importschedules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importschedulesActionPerformed(evt);
            }
        });
        File.add(importschedules);

        importpoint.setText("Import Point Subject");
        importpoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importpointActionPerformed(evt);
            }
        });
        File.add(importpoint);

        jMenuBar1.add(File);

        Edit.setBackground(new java.awt.Color(79, 142, 163));
        Edit.setText("Edit");
        Edit.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        managestudentclass.setText("Manage Students Class");
        managestudentclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managestudentclassActionPerformed(evt);
            }
        });
        Edit.add(managestudentclass);

        jMenuBar1.add(Edit);

        View.setBackground(new java.awt.Color(79, 142, 163));
        View.setText("View");
        View.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        viewstudentclass.setBackground(new java.awt.Color(79, 142, 163));
        viewstudentclass.setText("View Students Class");
        viewstudentclass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewstudentclassMouseClicked(evt);
            }
        });
        viewstudentclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewstudentclassActionPerformed(evt);
            }
        });
        View.add(viewstudentclass);

        viewscheduleclass.setBackground(new java.awt.Color(79, 142, 163));
        viewscheduleclass.setText("View Schedules Class");
        viewscheduleclass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewscheduleclassMouseClicked(evt);
            }
        });
        viewscheduleclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewscheduleclassActionPerformed(evt);
            }
        });
        View.add(viewscheduleclass);

        viewstudentsubject.setText("View Students Subject");
        viewstudentsubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewstudentsubjectActionPerformed(evt);
            }
        });
        View.add(viewstudentsubject);

        viewpointsubject.setText("View Point Subject");
        viewpointsubject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewpointsubjectMouseClicked(evt);
            }
        });
        viewpointsubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewpointsubjectActionPerformed(evt);
            }
        });
        View.add(viewpointsubject);

        jMenuBar1.add(View);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelRoot, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated


            // TODO add your handling code here:
            Common com= new Common();
            ActionListener updateClockAction = new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        getTimecurrents().setText(com.getTimeCurrent());
                      }
            };
            Timer t = new Timer(1000, updateClockAction);
            t.start();
            
            getUsername().setText(getAccurent().getNameshow());
            
//            Thread abc= new Thread(new Runnable() {
//                @Override
//                public void run() {
//                        timecurrents.setText(com.getTimeCurrent());             
//                }
//            });
//            while(true){
//                abc.start();
//                try {
//                    Thread.sleep(1000);
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(frm0003.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
                     
            
    }//GEN-LAST:event_formWindowActivated

    private void btnlogoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnlogoutMousePressed
        // TODO add your handling code here:
        this.setEnabled(false);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frmlogout frmlogout= new frmlogout();
        frmlogout.setVisible(true);
        frmlogout.setAlwaysOnTop(true);
        frmlogout.setAccountSchool(getAccurent());
        frmlogout.setFrm0002s(this);
    }//GEN-LAST:event_btnlogoutMousePressed

    private void btnchangepassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnchangepassMouseClicked
        // TODO add your handling code here:
        this.setEnabled(false);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frmchangepassword frmchange= new frmchangepassword();
        frmchange.setVisible(true);
        frmchange.setAlwaysOnTop(true);
        frmchange.setAccountschool(getAccurent());
        frmchange.setFrm0002s(this);
    }//GEN-LAST:event_btnchangepassMouseClicked

    private void viewstudentclassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewstudentclassMouseClicked
        // TODO add your handling code here    
    }//GEN-LAST:event_viewstudentclassMouseClicked

    private void viewscheduleclassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewscheduleclassMouseClicked
        // TODO add your handling code here:
         
    }//GEN-LAST:event_viewscheduleclassMouseClicked

    private void viewpointsubjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewpointsubjectMouseClicked
        // TODO add your handling code here:
//         createCombox();
//        jpannelviewpointsubject.setVisible(true);
//        jpannelviewscheduleclass.setVisible(false);
//        jpannelviewstudentclass.setVisible(false);
//        jpannelviewstudentsubject.setVisible(false);
    }//GEN-LAST:event_viewpointsubjectMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
          
        getJpannelviewpointsubject().setVisible(false);
        getJpannelviewscheduleclass().setVisible(false);
        getJpannelviewstudentclass().setVisible(false);
        getJpannelviewstudentsubject().setVisible(false);
    }//GEN-LAST:event_formComponentShown

    private void importStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importStudentActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooserImport= new JFileChooser();
        jFileChooserImport.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooserImport.addChoosableFileFilter(FileDAL.myFileFilter());
        jFileChooserImport.setAcceptAllFileFilterUsed(true);
        jFileChooserImport.setApproveButtonText("Open");
        int status = jFileChooserImport.showSaveDialog(jFileChooserImport);
        
        boolean statusimporterr=false;
        if (status == JFileChooser.APPROVE_OPTION) {
          File selectedFile = jFileChooserImport.getSelectedFile();
          System.out.println(selectedFile.getPath());
          if(!selectedFile.getName().contains(".csv")){
               //error
               frmerror er= new frmerror();
               er.setStrError(" Has Error when import Students CLass !");
               er.setVisible(true);
               return ;
           }
           Frm0002BLL bll0002= new Frm0002BLL();
           statusimporterr =bll0002.importStudentsClass(selectedFile.getPath());
           if(statusimporterr){
               //error
               frmerror er= new frmerror();
               er.setStrError(" Has Error when import Students CLass !");
               er.setVisible(true);
           }else{
               // view student class
               Frm0002BLL frm0002bll = new Frm0002BLL();
               Iterator<ClassRoomDTO> in= Frm0002BLL.getColClassRoom().iterator();
                getCbxstudentclass().removeAllItems();
               while(in.hasNext()){
                    ClassRoomDTO ob=in.next();                   
                    getIntoTableStudentClass(ob.getCollectionSTU());
                    getCbxstudentclass().addItem(ob.getNameroom());
               }
               //All Students Class:
                getLabelviewstudentclass().setText("Students is Imported:");
                 getjScrollPane2().getVerticalScrollBar().setValue(0);
                    getJpannelviewpointsubject().setVisible(false);
                    getJpannelviewscheduleclass().setVisible(false);
                    getJpannelviewstudentclass().setVisible(true);
                    getJpannelviewstudentsubject().setVisible(false);
           }
        } else if (status == JFileChooser.CANCEL_OPTION) {
            jFileChooserImport.cancelSelection();
        }
    }//GEN-LAST:event_importStudentActionPerformed

    private void cbxstudentclassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxstudentclassItemStateChanged
        // TODO add your handling code here:
        if(cbxstudentclass.getSelectedItem() !=  null){
            String nameclass=getCbxstudentclass().getSelectedItem().toString();
            Iterator<ClassRoomDTO> in= Frm0002BLL.getColClassRoom().iterator();
            while(in.hasNext()){
                ClassRoomDTO ob=in.next(); 
                if(ob.getNameroom().equals(nameclass)){
                   getIntoTableStudentClass(ob.getCollectionSTU());
                    getjScrollPane2().getVerticalScrollBar().setValue(0);
                }
            }
        }
    }//GEN-LAST:event_cbxstudentclassItemStateChanged

    public void loadstudentclass(){
        if(cbxstudentclass.getSelectedItem() !=  null){
            String nameclass=getCbxstudentclass().getSelectedItem().toString();
            Iterator<ClassRoomDTO> in= Frm0002BLL.getColClassRoom().iterator();
            while(in.hasNext()){
                ClassRoomDTO ob=in.next(); 
                if(ob.getNameroom().equals(nameclass)){
                   getIntoTableStudentClass(ob.getCollectionSTU());
                    getjScrollPane2().getVerticalScrollBar().setValue(0);
                }
            }
        }
    }
    
    private void cbxscheduleclassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxscheduleclassItemStateChanged
        // TODO add your handling code here:
        if(cbxscheduleclass.getSelectedItem() !=  null){
            String nameclass=getCbxscheduleclass().getSelectedItem().toString();
            Iterator<ClassRoomDTO> in= Frm0002BLL.getColClassRoom().iterator();
            while(in.hasNext()){
                ClassRoomDTO ob=in.next(); 
                if(ob.getNameroom().equals(nameclass)){
                   getIntoTableScheduleClass(ob.getCollectionSUB());
                }
            }
        }
    }//GEN-LAST:event_cbxscheduleclassItemStateChanged

    private void viewstudentclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewstudentclassActionPerformed
        // TODO add your handling code here:
         createCombox();
         getLabelviewstudentclass().setText("All Students Class:");
        getJpannelviewpointsubject().setVisible(false);
        getJpannelviewscheduleclass().setVisible(false);
        getJpannelviewstudentclass().setVisible(true);
        getJpannelviewstudentsubject().setVisible(false);
    }//GEN-LAST:event_viewstudentclassActionPerformed

    private void viewscheduleclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewscheduleclassActionPerformed
        // TODO add your handling code here:
        createCombox();
        getLabelviewscheduleclass().setText("SChedule Of Class:");
        getJpannelviewpointsubject().setVisible(false);
        getJpannelviewscheduleclass().setVisible(true);
        getJpannelviewstudentclass().setVisible(false);
        getJpannelviewstudentsubject().setVisible(false);
    }//GEN-LAST:event_viewscheduleclassActionPerformed

    private void viewstudentsubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewstudentsubjectActionPerformed
        // TODO add your handling code here:
        createCombox();
         
        getJpannelviewpointsubject().setVisible(false);
        getJpannelviewscheduleclass().setVisible(false);
        getJpannelviewstudentclass().setVisible(false);
        getJpannelviewstudentsubject().setVisible(true);
        loadcbxstudentsubject();
    }//GEN-LAST:event_viewstudentsubjectActionPerformed

    private void viewpointsubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewpointsubjectActionPerformed
        // TODO add your handling code here:
         createCombox();
          
        getJpannelviewpointsubject().setVisible(true);
        getJpannelviewscheduleclass().setVisible(false);
        getJpannelviewstudentclass().setVisible(false);
        getJpannelviewstudentsubject().setVisible(false);
    }//GEN-LAST:event_viewpointsubjectActionPerformed

    
    private void managestudentclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managestudentclassActionPerformed
        // TODO add your handling code here:
        frmaddstudents addstudent=new frmaddstudents();
        
        Frm0002BLL.getAllClassRoom();
        LinkedList<ClassRoomDTO> colcr=Frm0002BLL.getColClassRoom();
        Iterator<ClassRoomDTO> in=colcr.iterator();
        Map<String,String> col=new HashMap<>();
        while(in.hasNext()){
            ClassRoomDTO i= in.next();
            Collections.sort(i.getCollectionSTU());
            long l=Long.valueOf(i.getCollectionSTU().getLast().getMssv()) +1;
            col.put(i.getNameroom(), String.valueOf(l));
        }
        addstudent.setFrm0002s(this);
        addstudent.setMapmaxmssvclass(col);
        addstudent.setVisible(true);
    }//GEN-LAST:event_managestudentclassActionPerformed

    private void tablestudentclassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablestudentclassMouseClicked
        // TODO add your handling code here:
         
    }//GEN-LAST:event_tablestudentclassMouseClicked

    private void importschedulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importschedulesActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooserImport= new JFileChooser();
        jFileChooserImport.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooserImport.addChoosableFileFilter(FileDAL.myFileFilter());
        jFileChooserImport.setAcceptAllFileFilterUsed(true);
        jFileChooserImport.setApproveButtonText("Open");
        int status = jFileChooserImport.showSaveDialog(jFileChooserImport);
        
        boolean statusimporterr=false;
        if (status == JFileChooser.APPROVE_OPTION) {
          File selectedFile = jFileChooserImport.getSelectedFile();
          System.out.println(selectedFile.getPath());
          if(!selectedFile.getName().contains(".csv")){
               //error
               frmerror er= new frmerror();
               er.setStrError(" Has Error when import Students CLass !");
               er.setVisible(true);
               return ;
           }
           Frm0002BLL bll0002= new Frm0002BLL();
           statusimporterr =bll0002.importScheduleClass(selectedFile.getPath());
           if(statusimporterr){
               //error
               frmerror er= new frmerror();
               er.setStrError(" Has Error when import Schedule CLass !");
               er.setVisible(true);
           }else{
               // view student class
               Frm0002BLL frm0002bll = new Frm0002BLL();
               Iterator<ClassRoomDTO> in= Frm0002BLL.getColClassRoom().iterator();
                getCbxscheduleclass().removeAllItems();
               while(in.hasNext()){
                    ClassRoomDTO ob=in.next();                   
                    getIntoTableStudentClass(ob.getCollectionSTU());
                    getCbxscheduleclass().addItem(ob.getNameroom());
               }
               //All Students Class:
                getLabelviewscheduleclass().setText("SChedule is Imported:");
                 getjScrollPane2().getVerticalScrollBar().setValue(0);
                    getJpannelviewpointsubject().setVisible(false);
                    getJpannelviewscheduleclass().setVisible(true);
                    getJpannelviewstudentclass().setVisible(false);
                    getJpannelviewstudentsubject().setVisible(false);
           }
        } else if (status == JFileChooser.CANCEL_OPTION) {
            jFileChooserImport.cancelSelection();
        }
    }//GEN-LAST:event_importschedulesActionPerformed

    private void cbxstudentsubjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxstudentsubjectItemStateChanged
        // TODO add your handling code here:
         if(cbxstudentsubject.getSelectedItem() !=  null){
            Frm0002BLL.getAllSubPointStu();
            String nameclass=getCbxstudentsubject().getSelectedItem().toString();
            Iterator<SubjectsWithClassroomDTO> in= Frm0002BLL.getColSubPointStuent().iterator();
            while(in.hasNext()){
                try {
                    SubjectsWithClassroomDTO ob=in.next();
                    String name=ob.getNameroom()+"_"+ob.getCodesubject();
                    String aa= new String( ob.getNamesubject().getBytes("UTF-8"), "UTF-8");
                    if(name.equals(nameclass)){
                         
                        getIntoTableSubjectStudents(ob.getCollectionstudent());
                    }
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(frm0002.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_cbxstudentsubjectItemStateChanged

    public void loadcbxstudentsubject(){
        if(getCbxstudentsubject().getSelectedItem() !=  null){
            String nameclass=getCbxstudentsubject().getSelectedItem().toString();
            Iterator<SubjectsWithClassroomDTO> in= Frm0002BLL.getColSubPointStuent().iterator();
            while(in.hasNext()){
                try {
                    SubjectsWithClassroomDTO ob=in.next();
                    String name=ob.getNameroom()+"_"+ob.getCodesubject();
                    String aa= new String( ob.getNamesubject().getBytes("UTF-8"), "UTF-8");
                    if(name.equals(nameclass)){
                        
                        getIntoTableSubjectStudents(ob.getCollectionstudent());
                    }
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(frm0002.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    private void cbxpointsubjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxpointsubjectItemStateChanged
        // TODO add your handling code here:
       if(cbxpointsubject.getSelectedItem() !=  null){
            String nameclass=cbxpointsubject.getSelectedItem().toString();
            Iterator<SubjectsWithClassroomDTO> in= Frm0002BLL.getColSubPointStuent().iterator();
            while(in.hasNext()){
                SubjectsWithClassroomDTO ob=in.next();
                String name=ob.getNameroom()+"_"+ob.getCodesubject();
                if(name.equals(nameclass)){
                     
                    getIntoTablePSubjectStudents(ob.getCollectionpoint());
                }
            }
        }
    }//GEN-LAST:event_cbxpointsubjectItemStateChanged

    public void loadcbxpointsubjectItemStateChanged(){
         if(cbxpointsubject.getSelectedItem() !=  null){
             Frm0002BLL.getAllSubPointStu();
            String nameclass=cbxpointsubject.getSelectedItem().toString();
            Iterator<SubjectsWithClassroomDTO> in= Frm0002BLL.getColSubPointStuent().iterator();
            while(in.hasNext()){
                SubjectsWithClassroomDTO ob=in.next();
                String name=ob.getNameroom()+"_"+ob.getCodesubject();
                if(name.equals(nameclass)){
                     
                    getIntoTablePSubjectStudents(ob.getCollectionpoint());
                }
            }
        }
    }
    
    private void btnoutclassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnoutclassMouseClicked
       // TODO add your handling code here:
       int r=tablestudentsubject.getSelectedRow();
       System.out.println("row "+r);
       frmerror er= new frmerror();
       if(r==-1){
           er.getLabelerrorroot().setForeground(Color.red);
           er.setStrError("Not choose any row yet !");
           er.setVisible(true);
       }else{
           String valuegetMssv = tablestudentsubject.getModel().getValueAt(r,1).toString();
           
           SubjectsWithClassroomDTO ds =null;
           Iterator<SubjectsWithClassroomDTO> in= Frm0002BLL.getColSubPointStuent().iterator();
           while(in.hasNext()){
             SubjectsWithClassroomDTO ob=in.next();
             String name=ob.getNameroom()+"_"+ob.getCodesubject();
             if(name.equals(cbxstudentsubject.getSelectedItem().toString())){
                ds= new SubjectsWithClassroomDTO(ob);
                break;
             }
            }
            LinkedList<StudentsDTO> dss=ds.getCollectionstudent();
            int indexdelete=0;
            for(StudentsDTO i:dss){
               if(i.getMssv().equals(valuegetMssv)){
                   break;
               }
               indexdelete++;
            }
            System.out.println(dss.remove(indexdelete));
            ds.setCollectionstudent(dss);
            SubjectsWithClassroomDAL subdal= new SubjectsWithClassroomDAL();
            if(subdal.writeSubjectWithStudent(ds)){
                er.getLabelerrorroot().setForeground(Color.BLUE);
                er.setStrError(" Moved student Mssv: "+ valuegetMssv);
                er.setVisible(true);
                loadcbxstudentsubject();
                return ;
            }
           er.getLabelerrorroot().setForeground(Color.red);
           er.setStrError("Not remove Mssv !"+valuegetMssv);
           er.setVisible(true); 
       }
    }//GEN-LAST:event_btnoutclassMouseClicked

    private void btninclassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btninclassMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btninclassMouseClicked

    private void btninclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninclassActionPerformed
        // TODO add your handling code here:
        frmmanageclass frm= new frmmanageclass();
        frm.setFrm0002s(this);
        frm.setNameclass(this.cbxstudentsubject.getSelectedItem().toString());
        frm.setVisible(true);
    }//GEN-LAST:event_btninclassActionPerformed

    private void importpointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importpointActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooserImport= new JFileChooser();
        jFileChooserImport.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooserImport.addChoosableFileFilter(FileDAL.myFileFilter());
        jFileChooserImport.setAcceptAllFileFilterUsed(true);
        jFileChooserImport.setApproveButtonText("Open");
        int status = jFileChooserImport.showSaveDialog(jFileChooserImport);
        
        boolean statusimporterr=false;
        if (status == JFileChooser.APPROVE_OPTION) {
          File selectedFile = jFileChooserImport.getSelectedFile();
          System.out.println(selectedFile.getPath());
          if(!selectedFile.getName().contains(".csv")){
               //error
               frmerror er= new frmerror();
               er.setStrError(" Has Error when import Point CLass !");
               er.setVisible(true);
               return ;
           }
           Frm0002BLL bll0002= new Frm0002BLL();
           statusimporterr =bll0002.importPointClass(selectedFile.getPath());
           if(!statusimporterr){
               //error
               frmerror er= new frmerror();
               er.setStrError(" Has Error when import Point CLass !");
               er.setVisible(true);
           }else{
               // view student class
               Frm0002BLL frm0002bll = new Frm0002BLL();
               Iterator<SubjectsWithClassroomDTO> in= Frm0002BLL.getColSubPointStuent().iterator();
               cbxpointsubject.removeAllItems();
               while(in.hasNext()){
                    SubjectsWithClassroomDTO ob=in.next();                   
                    getIntoTablePSubjectStudents(ob.getCollectionpoint());
                    cbxpointsubject.addItem(ob.getNameroom()+"_"+ob.getCodesubject());
               }
               //All Students Class:
                getLabelviewscheduleclass().setText("Point is Imported:");
                 getjScrollPane2().getVerticalScrollBar().setValue(0);
                    getJpannelviewpointsubject().setVisible(true);
                    getJpannelviewscheduleclass().setVisible(false);
                    getJpannelviewstudentclass().setVisible(false);
                    getJpannelviewstudentsubject().setVisible(false);
           }
        } else if (status == JFileChooser.CANCEL_OPTION) {
            jFileChooserImport.cancelSelection();
        }
    }//GEN-LAST:event_importpointActionPerformed

    private void btnchangepointMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnchangepointMouseClicked
        // TODO add your handling code here:
       int r=tablepointsubject.getSelectedRow();
       System.out.println("row "+r);
       frmerror er= new frmerror();
       if(r==-1){
           er.getLabelerrorroot().setForeground(Color.red);
           er.setStrError("Not choose any row yet !");
           er.setVisible(true);
       }else{
           String nameclass=cbxpointsubject.getSelectedItem().toString();
           String mssvstu = tablepointsubject.getModel().getValueAt(r,1).toString();
           String namestu = tablepointsubject.getModel().getValueAt(r,2).toString();
           String pointmid = tablepointsubject.getModel().getValueAt(r,3).toString();
           String pointfinal = tablepointsubject.getModel().getValueAt(r,4).toString();
           String pointdifference = tablepointsubject.getModel().getValueAt(r,5).toString();
           String pointsum = tablepointsubject.getModel().getValueAt(r,6).toString();
           StudentsWithPointDTO po=
           new StudentsWithPointDTO(mssvstu,namestu,
            Integer.valueOf(pointmid),
            Integer.valueOf(pointfinal),
            Integer.valueOf(pointdifference),
            Float.valueOf(pointsum));
           frmchangepoint frm = new frmchangepoint();
           frm.setFrm(this);
           frm.setStu(po);
           frm.setNameclass(nameclass);
           frm.setVisible(true);
       }
    }//GEN-LAST:event_btnchangepointMouseClicked

    private void btnchangepointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchangepointActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnchangepointActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm0002.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm0002.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm0002.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm0002.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm0002().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Edit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu View;
    private javax.swing.JButton btnchangepass;
    private javax.swing.JButton btnchangepoint;
    private javax.swing.JButton btninclass;
    private javax.swing.JButton btnlogout;
    private javax.swing.JButton btnoutclass;
    private javax.swing.JComboBox<String> cbxpointsubject;
    private javax.swing.JComboBox<String> cbxscheduleclass;
    private javax.swing.JComboBox<String> cbxstudentclass;
    private javax.swing.JComboBox<String> cbxstudentsubject;
    private javax.swing.JMenuItem importStudent;
    private javax.swing.JMenuItem importpoint;
    private javax.swing.JMenuItem importschedules;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelRoot;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel jpannelviewpointsubject;
    private javax.swing.JPanel jpannelviewscheduleclass;
    private javax.swing.JPanel jpannelviewstudentclass;
    private javax.swing.JPanel jpannelviewstudentsubject;
    private javax.swing.JLabel labelviewpointsubject;
    private javax.swing.JLabel labelviewscheduleclass1;
    private javax.swing.JLabel labelviewstudentclass;
    private javax.swing.JLabel labelviewstudentsubject;
    private javax.swing.JLabel labelxacxuatdau;
    private javax.swing.JMenuItem managestudentclass;
    private javax.swing.JTable tablepointsubject;
    private javax.swing.JTable tablescheduleclass;
    private javax.swing.JTable tablestudentclass;
    private javax.swing.JTable tablestudentsubject;
    private javax.swing.JLabel timecurrents;
    private javax.swing.JLabel username;
    private javax.swing.JMenuItem viewpointsubject;
    private javax.swing.JMenuItem viewscheduleclass;
    private javax.swing.JMenuItem viewstudentclass;
    private javax.swing.JMenuItem viewstudentsubject;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the accurent
     */
    public AccountSchoolDTO getAccurent() {
        return accurent;
    }

    /**
     * @param accurent the accurent to set
     */
    public void setAccurent(AccountSchoolDTO accurent) {
        this.accurent = accurent;
    }
    
    void createContent(){
        createCombox();
    }

    void createCombox(){
        // set student class, scheduler class
        Frm0002BLL.getAllClassRoom();
        Frm0002BLL.getAllSubPointStu();
        Iterator<ClassRoomDTO> in= Frm0002BLL.getColClassRoom().iterator();
        Iterator<SubjectsWithClassroomDTO> ins= Frm0002BLL.getColSubPointStuent().iterator();
        
        getCbxstudentclass().removeAllItems();
        getCbxscheduleclass().removeAllItems();
        getCbxstudentsubject().removeAllItems();
        getCbxpointsubject().removeAllItems();
        while(in.hasNext()){
            ClassRoomDTO ob=in.next(); 
            getCbxstudentclass().addItem(ob.getNameroom());
            getCbxscheduleclass().addItem(ob.getNameroom());
        }
        while(ins.hasNext()){
            SubjectsWithClassroomDTO ob=ins.next();
            String name=ob.getNameroom()+"_"+ob.getCodesubject();
            getCbxstudentsubject().addItem(name);
            getCbxpointsubject().addItem(name);
        }
    }
    
    void getIntoTableStudentClass(LinkedList<StudentsDTO> col){
        DefaultTableModel model=(DefaultTableModel) getTablestudentclass().getModel();
        model.setRowCount(0);
        if(col!=null){
            Iterator<StudentsDTO> in= col.iterator();
            int i=1;
            while(in.hasNext()){
                StudentsDTO stu=in.next();
                Vector vt=new Vector();
                vt.add(i++);
                vt.add(stu.getMssv());
                vt.add(stu.getName());
                vt.add(stu.getSex());
                vt.add(stu.getIdentity());
                model.addRow(vt);
            }
        }
        
    }
    
    void getIntoTableScheduleClass(LinkedList<SubjectsDTO> col){
        DefaultTableModel model=(DefaultTableModel) getTablescheduleclass().getModel();
        model.setRowCount(0);
        if(col == null){
            return;
        }
        Iterator<SubjectsDTO> in= col.iterator();
        int i=1;
        while(in.hasNext()){
            SubjectsDTO stu=in.next();
            Vector vt=new Vector();
            vt.add(i++);
            vt.add(stu.getCodesubject());
            vt.add(stu.getNamesubject());
            vt.add(stu.getRoomstudy());
            model.addRow(vt);
        }
    }
    
    void getIntoTableSubjectStudents(LinkedList<StudentsDTO> col){
        DefaultTableModel model=(DefaultTableModel) getTablestudentsubject().getModel();
        model.setRowCount(0);
        if(col!=null){
        Iterator<StudentsDTO> in= col.iterator();
        int i=1;
        while(in.hasNext()){
            StudentsDTO stu=in.next();
            Vector vt=new Vector();
            vt.add(i++);
            vt.add(stu.getMssv());
            vt.add(stu.getName());
            vt.add(stu.getSex());
            vt.add(stu.getIdentity());
            model.addRow(vt);
        }
        }
    }
    
    void getIntoTablePSubjectStudents(LinkedList<StudentsWithPointDTO> col){
        DefaultTableModel model=(DefaultTableModel) tablepointsubject.getModel();
        model.setRowCount(0);
        if(col.size()>0){
            Iterator<StudentsWithPointDTO> in= col.iterator();
            int i=1;
            int per=0;
            while(in.hasNext()){
                StudentsWithPointDTO stu=in.next();
                Vector vt=new Vector();
                vt.add(i++);
                vt.add(stu.getMssv());
                vt.add(stu.getNamestudent());
                vt.add(stu.getPointmid());
                vt.add(stu.getPointfinal());
                vt.add(stu.getPointdifference());
                vt.add(stu.getPointsummary());
                if(stu.getPointsummary() >= 5){
                    vt.add("Passed");
                    per=per+1;
                }else{
                    vt.add("falled");
                }
                model.addRow(vt);
            }
            float p=per*100/col.size();
            String s=String.valueOf(p);
            labelxacxuatdau.setText("Percent pass: "+ s+" %");
        }
    }
    
//    void getIntoTableScheduleClass(LinkedList<SubjectsDTO> col){
//         DefaultTableModel model=(DefaultTableModel) tablescheduleclass.getModel();
//        model.setRowCount(0);
//        Iterator<Subjects> in= col.iterator();
//        int i=0;
//        while(in.hasNext()){
//            SubjectsDTO stu=in.next();
//            Vector vt=new Vector();
//            vt.add(i++);
//            vt.add(stu.getCodesubject());
//            vt.add(stu.getNamesubject());
//            vt.add(stu.getNameroomclass());
//            model.addRow(vt);
//        }
//    }

    /**
     * @return the Edit
     */
    public javax.swing.JMenu getEdit() {
        return Edit;
    }

    /**
     * @param Edit the Edit to set
     */
    public void setEdit(javax.swing.JMenu Edit) {
        this.Edit = Edit;
    }

    /**
     * @return the File
     */
    public javax.swing.JMenu getFile() {
        return File;
    }

    /**
     * @param File the File to set
     */
    public void setFile(javax.swing.JMenu File) {
        this.File = File;
    }

    /**
     * @return the View
     */
    public javax.swing.JMenu getView() {
        return View;
    }

    /**
     * @param View the View to set
     */
    public void setView(javax.swing.JMenu View) {
        this.View = View;
    }

    /**
     * @return the btnchangepass
     */
    public javax.swing.JButton getBtnchangepass() {
        return btnchangepass;
    }

    /**
     * @param btnchangepass the btnchangepass to set
     */
    public void setBtnchangepass(javax.swing.JButton btnchangepass) {
        this.btnchangepass = btnchangepass;
    }

    /**
     * @return the btninclass
     */
    public javax.swing.JButton getBtninclass() {
        return btninclass;
    }

    /**
     * @param btninclass the btninclass to set
     */
    public void setBtninclass(javax.swing.JButton btninclass) {
        this.btninclass = btninclass;
    }

    /**
     * @return the btnlogout
     */
    public javax.swing.JButton getBtnlogout() {
        return btnlogout;
    }

    /**
     * @param btnlogout the btnlogout to set
     */
    public void setBtnlogout(javax.swing.JButton btnlogout) {
        this.btnlogout = btnlogout;
    }

    /**
     * @return the btnoutclass
     */
    public javax.swing.JButton getBtnoutclass() {
        return btnoutclass;
    }

    /**
     * @param btnoutclass the btnoutclass to set
     */
    public void setBtnoutclass(javax.swing.JButton btnoutclass) {
        this.btnoutclass = btnoutclass;
    }

    /**
     * @return the cbxpointsubject
     */
    public javax.swing.JComboBox<String> getCbxpointsubject() {
        return cbxpointsubject;
    }

    /**
     * @param cbxpointsubject the cbxpointsubject to set
     */
    public void setCbxpointsubject(javax.swing.JComboBox<String> cbxpointsubject) {
        this.cbxpointsubject = cbxpointsubject;
    }

    /**
     * @return the cbxscheduleclass
     */
    public javax.swing.JComboBox<String> getCbxscheduleclass() {
        return cbxscheduleclass;
    }

    /**
     * @param cbxscheduleclass the cbxscheduleclass to set
     */
    public void setCbxscheduleclass(javax.swing.JComboBox<String> cbxscheduleclass) {
        this.cbxscheduleclass = cbxscheduleclass;
    }

    /**
     * @return the cbxstudentclass
     */
    public javax.swing.JComboBox<String> getCbxstudentclass() {
        return cbxstudentclass;
    }

    /**
     * @param cbxstudentclass the cbxstudentclass to set
     */
    public void setCbxstudentclass(javax.swing.JComboBox<String> cbxstudentclass) {
        this.cbxstudentclass = cbxstudentclass;
    }

    /**
     * @return the cbxstudentsubject
     */
    public javax.swing.JComboBox<String> getCbxstudentsubject() {
        return cbxstudentsubject;
    }

    /**
     * @param cbxstudentsubject the cbxstudentsubject to set
     */
    public void setCbxstudentsubject(javax.swing.JComboBox<String> cbxstudentsubject) {
        this.cbxstudentsubject = cbxstudentsubject;
    }

    /**
     * @return the importStudent
     */
    public javax.swing.JMenuItem getImportStudent() {
        return importStudent;
    }

    /**
     * @param importStudent the importStudent to set
     */
    public void setImportStudent(javax.swing.JMenuItem importStudent) {
        this.importStudent = importStudent;
    }

    /**
     * @return the importpoint
     */
    public javax.swing.JMenuItem getImportpoint() {
        return importpoint;
    }

    /**
     * @param importpoint the importpoint to set
     */
    public void setImportpoint(javax.swing.JMenuItem importpoint) {
        this.importpoint = importpoint;
    }

    /**
     * @return the importschedules
     */
    public javax.swing.JMenuItem getImportschedules() {
        return importschedules;
    }

    /**
     * @param importschedules the importschedules to set
     */
    public void setImportschedules(javax.swing.JMenuItem importschedules) {
        this.importschedules = importschedules;
    }

    /**
     * @return the jMenuBar1
     */
    public javax.swing.JMenuBar getjMenuBar1() {
        return jMenuBar1;
    }

    /**
     * @param jMenuBar1 the jMenuBar1 to set
     */
    public void setjMenuBar1(javax.swing.JMenuBar jMenuBar1) {
        this.jMenuBar1 = jMenuBar1;
    }

    /**
     * @return the jPanelRoot
     */
    public javax.swing.JPanel getjPanelRoot() {
        return jPanelRoot;
    }

    /**
     * @param jPanelRoot the jPanelRoot to set
     */
    public void setjPanelRoot(javax.swing.JPanel jPanelRoot) {
        this.jPanelRoot = jPanelRoot;
    }

    /**
     * @return the jScrollPane2
     */
    public javax.swing.JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    /**
     * @param jScrollPane2 the jScrollPane2 to set
     */
    public void setjScrollPane2(javax.swing.JScrollPane jScrollPane2) {
        this.jScrollPane2 = jScrollPane2;
    }

    /**
     * @return the jScrollPane3
     */
    public javax.swing.JScrollPane getjScrollPane3() {
        return jScrollPane3;
    }

    /**
     * @param jScrollPane3 the jScrollPane3 to set
     */
    public void setjScrollPane3(javax.swing.JScrollPane jScrollPane3) {
        this.jScrollPane3 = jScrollPane3;
    }

    /**
     * @return the jScrollPane4
     */
    public javax.swing.JScrollPane getjScrollPane4() {
        return jScrollPane4;
    }

    /**
     * @param jScrollPane4 the jScrollPane4 to set
     */
    public void setjScrollPane4(javax.swing.JScrollPane jScrollPane4) {
        this.jScrollPane4 = jScrollPane4;
    }

    /**
     * @return the jScrollPane5
     */
    public javax.swing.JScrollPane getjScrollPane5() {
        return jScrollPane5;
    }

    /**
     * @param jScrollPane5 the jScrollPane5 to set
     */
    public void setjScrollPane5(javax.swing.JScrollPane jScrollPane5) {
        this.jScrollPane5 = jScrollPane5;
    }

    /**
     * @return the jpannelviewpointsubject
     */
    public javax.swing.JPanel getJpannelviewpointsubject() {
        return jpannelviewpointsubject;
    }

    /**
     * @param jpannelviewpointsubject the jpannelviewpointsubject to set
     */
    public void setJpannelviewpointsubject(javax.swing.JPanel jpannelviewpointsubject) {
        this.jpannelviewpointsubject = jpannelviewpointsubject;
    }

    /**
     * @return the jpannelviewscheduleclass
     */
    public javax.swing.JPanel getJpannelviewscheduleclass() {
        return jpannelviewscheduleclass;
    }

    /**
     * @param jpannelviewscheduleclass the jpannelviewscheduleclass to set
     */
    public void setJpannelviewscheduleclass(javax.swing.JPanel jpannelviewscheduleclass) {
        this.jpannelviewscheduleclass = jpannelviewscheduleclass;
    }

    /**
     * @return the jpannelviewstudentclass
     */
    public javax.swing.JPanel getJpannelviewstudentclass() {
        return jpannelviewstudentclass;
    }

    /**
     * @param jpannelviewstudentclass the jpannelviewstudentclass to set
     */
    public void setJpannelviewstudentclass(javax.swing.JPanel jpannelviewstudentclass) {
        this.jpannelviewstudentclass = jpannelviewstudentclass;
    }

    /**
     * @return the jpannelviewstudentsubject
     */
    public javax.swing.JPanel getJpannelviewstudentsubject() {
        return jpannelviewstudentsubject;
    }

    /**
     * @param jpannelviewstudentsubject the jpannelviewstudentsubject to set
     */
    public void setJpannelviewstudentsubject(javax.swing.JPanel jpannelviewstudentsubject) {
        this.jpannelviewstudentsubject = jpannelviewstudentsubject;
    }
    /**
     * @return the labelviewpointsubject
     */
    public javax.swing.JLabel getLabelviewpointsubject() {
        return labelviewpointsubject;
    }

    /**
     * @param labelviewpointsubject the labelviewpointsubject to set
     */
    public void setLabelviewpointsubject(javax.swing.JLabel labelviewpointsubject) {
        this.labelviewpointsubject = labelviewpointsubject;
    }

    /**
     * @return the labelviewscheduleclass
     */
    public javax.swing.JLabel getLabelviewscheduleclass() {
        return labelxacxuatdau;
    }

    /**
     * @param labelviewscheduleclass the labelviewscheduleclass to set
     */
    public void setLabelviewscheduleclass(javax.swing.JLabel labelviewscheduleclass) {
        this.labelxacxuatdau = labelviewscheduleclass;
    }

    /**
     * @return the labelviewstudentclass
     */
    public javax.swing.JLabel getLabelviewstudentclass() {
        return labelviewstudentclass;
    }

    /**
     * @param labelviewstudentclass the labelviewstudentclass to set
     */
    public void setLabelviewstudentclass(javax.swing.JLabel labelviewstudentclass) {
        this.labelviewstudentclass = labelviewstudentclass;
    }

    /**
     * @return the labelviewstudentsubject
     */
    public javax.swing.JLabel getLabelviewstudentsubject() {
        return labelviewstudentsubject;
    }

    /**
     * @param labelviewstudentsubject the labelviewstudentsubject to set
     */
    public void setLabelviewstudentsubject(javax.swing.JLabel labelviewstudentsubject) {
        this.labelviewstudentsubject = labelviewstudentsubject;
    }

    /**
     * @return the managestudentclass
     */
    public javax.swing.JMenuItem getManagestudentclass() {
        return managestudentclass;
    }

    /**
     * @param managestudentclass the managestudentclass to set
     */
    public void setManagestudentclass(javax.swing.JMenuItem managestudentclass) {
        this.managestudentclass = managestudentclass;
    }

    /**
     * @return the tablepointsubject
     */
    public javax.swing.JTable getTablepointsubject() {
        return tablepointsubject;
    }

    /**
     * @param tablepointsubject the tablepointsubject to set
     */
    public void setTablepointsubject(javax.swing.JTable tablepointsubject) {
        this.tablepointsubject = tablepointsubject;
    }

    /**
     * @return the tablescheduleclass
     */
    public javax.swing.JTable getTablescheduleclass() {
        return tablescheduleclass;
    }

    /**
     * @param tablescheduleclass the tablescheduleclass to set
     */
    public void setTablescheduleclass(javax.swing.JTable tablescheduleclass) {
        this.tablescheduleclass = tablescheduleclass;
    }

    /**
     * @return the tablestudentclass
     */
    public javax.swing.JTable getTablestudentclass() {
        return tablestudentclass;
    }

    /**
     * @param tablestudentclass the tablestudentclass to set
     */
    public void setTablestudentclass(javax.swing.JTable tablestudentclass) {
        this.tablestudentclass = tablestudentclass;
    }

    /**
     * @return the tablestudentsubject
     */
    public javax.swing.JTable getTablestudentsubject() {
        return tablestudentsubject;
    }

    /**
     * @param tablestudentsubject the tablestudentsubject to set
     */
    public void setTablestudentsubject(javax.swing.JTable tablestudentsubject) {
        this.tablestudentsubject = tablestudentsubject;
    }

    /**
     * @return the timecurrents
     */
    public javax.swing.JLabel getTimecurrents() {
        return timecurrents;
    }

    /**
     * @param timecurrents the timecurrents to set
     */
    public void setTimecurrents(javax.swing.JLabel timecurrents) {
        this.timecurrents = timecurrents;
    }

    /**
     * @return the username
     */
    public javax.swing.JLabel getUsername() {
        return username;
    }

    /**
     * @param username the username to set
     */
    public void setUsername(javax.swing.JLabel username) {
        this.username = username;
    }

    /**
     * @return the viewpointsubject
     */
    public javax.swing.JMenuItem getViewpointsubject() {
        return viewpointsubject;
    }

    /**
     * @param viewpointsubject the viewpointsubject to set
     */
    public void setViewpointsubject(javax.swing.JMenuItem viewpointsubject) {
        this.viewpointsubject = viewpointsubject;
    }

    /**
     * @return the viewscheduleclass
     */
    public javax.swing.JMenuItem getViewscheduleclass() {
        return viewscheduleclass;
    }

    /**
     * @param viewscheduleclass the viewscheduleclass to set
     */
    public void setViewscheduleclass(javax.swing.JMenuItem viewscheduleclass) {
        this.viewscheduleclass = viewscheduleclass;
    }

    /**
     * @return the viewstudentclass
     */
    public javax.swing.JMenuItem getViewstudentclass() {
        return viewstudentclass;
    }

    /**
     * @param viewstudentclass the viewstudentclass to set
     */
    public void setViewstudentclass(javax.swing.JMenuItem viewstudentclass) {
        this.viewstudentclass = viewstudentclass;
    }

    /**
     * @return the viewstudentsubject
     */
    public javax.swing.JMenuItem getViewstudentsubject() {
        return viewstudentsubject;
    }

    /**
     * @param viewstudentsubject the viewstudentsubject to set
     */
    public void setViewstudentsubject(javax.swing.JMenuItem viewstudentsubject) {
        this.viewstudentsubject = viewstudentsubject;
    }
}